z := 1;
z := z + 1;
x := 0;
y := 0;
k := 0;
x := 1;
x := x + 1;
if k do
	x := x + 1;
	y := x - 1;
else do
	y := add(z, x);
	y := mult(y, y);
	y := y + 1;
	y1 := div(y, z);
	z := z+1;
	y2 := mod(y, z);
end;
z := div(y, z);
z := nthprime(z);
k := 1;
k1 := nthprime(k);
k := k + 1;
k2 := nthprime(k);
k := k + 1;
k3 := nthprime(k);
k := k + 1;
k4 := nthprime(k);
k := k + 1;
k5 := nthprime(k);
k := k + 1;
k6 := nthprime(k);
k := k + 1;
k7 := nthprime(k);
k := k + 1;
k8 := nthprime(k);


k := 1;
k := add(k, k);
k := add(k, k);
k := add(k, k);
k := add(k, k);
k := add(k, k);
k := add(k, k);
k := add(k, y);
k := k - 1;
kadd := sub(k, y);
kmult := mult(k, y);
kdiv := div(k, y);
kmod := mod(k, y);
kpow := pow(k, kmod);
kgr := greater(k, y);
kgr2 := greater(y, k);
kdivisible := divisible(kmult, k);
k := k + 1;
kdivisible1 := divisible(kmult, k);
constant1 := 1;
constant2 := constant1 + 1;
kgrpow := greatestpowthatdivides(constant2, kmult);
o1 := ifzero(z);